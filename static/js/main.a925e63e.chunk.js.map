{"version":3,"sources":["customer.js","barista.js","machine.js","App.js","serviceWorker.js","index.js"],"names":["Customer","state","dripClass","frenchClass","espressoClass","this","setState","order","props","orderOption","className","onClick","highlightDrip","highlightFrench","highlightEspresso","Component","Barista","waitingMessage","greetingClass","orderClass","waitingClass","prevProps","passedOrder","setTimeout","changeClass","sendMessage","nextProps","nextState","message","secondMessage","greeting","Machine","makingDrink","loadingBar","brewCoffee","App","newOrder","handleOrder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a925e63e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './customer.css';\r\n\r\nclass Customer extends Component {\r\n\r\n    //this defines the original state for what class will be displayed\r\n    state = {\r\n        dripClass: \"dripBrew\",\r\n        frenchClass: \"frenchPress\",\r\n        espressoClass: \"espresso\"\r\n    }\r\n\r\n    //these three highlight functions will change the class of the selected div\r\n    //and make the other two return to their original state\r\n    highlightDrip() {\r\n        this.setState ( { dripClass: \"dripHighlighted\" } )\r\n        this.setState ( { frenchClass: \"frenchPress\" } )\r\n        this.setState ( { espressoClass: \"espresso\" } )\r\n\r\n        //this stores the current class in a variable to send to app.js\r\n        var order = this.state.dripClass;\r\n\r\n        //this sends that variable with the property orderOption to be called in the component\r\n        this.props.orderOption(order);\r\n    }\r\n\r\n    highlightFrench() {\r\n        this.setState ( { frenchClass: \"frenchHighlighted\" } )\r\n        this.setState ( { dripClass: \"dripBrew\" } )\r\n        this.setState ( { espressoClass: \"espresso\" } )\r\n\r\n        var order = this.state.frenchClass;\r\n\r\n        this.props.orderOption(order);\r\n    }\r\n\r\n    highlightEspresso() {\r\n        this.setState ( { espressoClass: \"espressoHighlighted\" } )\r\n        this.setState ( { dripClass: \"dripBrew\" } )\r\n        this.setState ( { frenchClass: \"frenchPress\" } )\r\n\r\n        var order = this.state.espressoClass;\r\n\r\n        this.props.orderOption(order);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"customer\">\r\n                <div className=\"customerHead\">Please place your order.</div>\r\n                <div className=\"threeOptions\">\r\n                    {/* these divs have the className defined by the current state and the onClick function is called \r\n                    that will then change the classes depending on which is clicked */}\r\n                    <div className={this.state.dripClass} onClick={() => { this.highlightDrip() }}>Drip Brew</div>\r\n                    <div className={this.state.frenchClass} onClick={() => { this.highlightFrench() }}>French Press</div>\r\n                    <div className={this.state.espressoClass} onClick={() => { this.highlightEspresso() }}>Espresso</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Customer;","import React, { Component } from 'react';\r\nimport './barista.css';\r\n\r\nclass Barista extends Component {\r\n\r\n    // this sets the state for the orginal waiting message as well as the\r\n    // three classNames of the divs in order to be able to use animation\r\n    state = {\r\n        waitingMessage: \"\",\r\n        greetingClass: \"firstGreeting\",\r\n        orderClass: \"firstOrder\",\r\n        waitingClass: \"firstMessage\"\r\n    }\r\n\r\n    // this updates the component if another option is clicked in customer.js\r\n    // and calls the changeClass function after 1 sec and the sendMessage function after 5 sec\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.passedOrder !== prevProps.passedOrder) {\r\n            setTimeout( () => { this.changeClass() }, 1000);\r\n            setTimeout( () => { this.sendMessage() }, 5000);\r\n        }\r\n    }\r\n\r\n    //this updates the component after the first option is clicked when the original \r\n    // value is an empty string then calls the same functions as the last\r\n    componentWillUpdate(nextProps, nextState) {\r\n        if (this.state.waitingMessage === \"\"){\r\n            setTimeout( () => { this.changeClass() }, 1000);\r\n            setTimeout( () => { this.sendMessage() }, 5000);\r\n        }\r\n    }\r\n\r\n    //this function calls the css animation\r\n    //the greeting disappears after 2 sec while the order appears after 2s\r\n    //then the order starts disappearing after waiting 6 sec\r\n    changeClass() {\r\n        this.setState({\r\n            greetingClass: \"transitionOut\",\r\n            orderClass: \"transitionIn\"\r\n        })\r\n\r\n        setTimeout( () => { this.setState({orderClass: \"transitionOut\"})}, 6000);\r\n    }\r\n\r\n    //this function changes the waiting message\r\n    //the first message appears then the second appears after 5 sec\r\n    sendMessage() {\r\n        var message = \"Waiting for \" + this.props.passedOrder + \".\";\r\n        var secondMessage = \"Here is your \" + this.props.passedOrder + \".\";\r\n\r\n        this.setState({\r\n            waitingMessage: message,\r\n            waitingClass: \"transitionIn\"\r\n        })\r\n\r\n        setTimeout( () => { this.setState({waitingMessage: secondMessage}) }, 5000);\r\n\r\n        setTimeout( () => { this.setState({waitingClass: \"transitionOut\"})}, 7000);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"barista\">\r\n                <div className=\"baristaHead\"></div>\r\n                <div className=\"threeDivs\">\r\n                    {/* these three divs store the current state in their className\r\n                    the first two divs take the props from app.js and the third is the current \r\n                    waitingMessage state */}\r\n                    <div className={this.state.greetingClass}>{ this.props.greeting }</div>\r\n                    <div className={this.state.orderClass}>{ this.props.order }</div>\r\n                    <div className={this.state.waitingClass} > { this.state.waitingMessage }</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Barista;","import React, { Component } from 'react';\r\nimport './machine.css';\r\n\r\nclass Machine extends Component {\r\n\r\n    //this stores the info for both divs in the current state\r\n    state = {\r\n        makingDrink: \"Now brewing: Nothing.\",\r\n        loadingBar: \"firstLoadingBar\"\r\n    }\r\n\r\n    //this is similar to barista and only calls the brewCoffee function\r\n    // after 5 sec if the order was changed\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.passedOrder !== prevProps.passedOrder) {\r\n            setTimeout( () => { this.brewCoffee() }, 5000);\r\n        }\r\n    }\r\n\r\n    //this is similar to barista and cllas the brewCoffee function\r\n    //after the initial click in customer.js\r\n    componentWillUpdate(nextProps, nextState) {\r\n        if (this.state.makingDrink===\"Now brewing: Nothing.\") {\r\n            setTimeout( () => { this.brewCoffee() }, 5000);\r\n        }\r\n    }\r\n\r\n    //this function dispalys the first message then the second after 5 sec\r\n    //It also sets the state of the loading bar once its called\r\n    brewCoffee() {\r\n        var message = \"Currently brewing \" + this.props.passedOrder + \".\";\r\n        var secondMessage = this.props.passedOrder + \" is done!\";\r\n\r\n        this.setState({\r\n            makingDrink: message,\r\n            loadingBar: \"loadBar\"\r\n        })\r\n\r\n        setTimeout( () => { this.setState({makingDrink: secondMessage, loadingBar: \"unloadBar\"}) }, 5000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"machine\">\r\n                <div className=\"machineHead\"></div>\r\n                <div className=\"twoDivs\">\r\n                    {/* the first div stores the current state in the div\r\n                    and the second stores the current state in the class for animation */}\r\n                    <div className=\"statusMessage\">{ this.state.makingDrink }</div>\r\n                    <div className={this.state.loadingBar}>Status</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Machine;","import React, { Component } from 'react';\nimport './App.css';\nimport Customer from './customer.js';\nimport Barista from './barista.js';\nimport Machine from './machine.js';\n\nclass App extends Component {\n\n  //this defines the state of the three elements in the Barista.js\n  state = {\n    passedOrder: \"\",\n    order: \"\",\n    greeting: \"Hello, how may I help you today?\",\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Cafe\">\n          {/* this component passes the order information from customer.js to app.js\n          then calls the handleOrder function with the order as a parameter. */}\n          <Customer orderOption={ (newOrder) => { this.handleOrder(newOrder) }}/>\n\n          {/* this component takes the three states from above and calls them as props\n          in barista.js to display the messages. The waiting message is the only one not from app.js */}\n          <Barista order = {this.state.order} \n                    passedOrder = {this.state.passedOrder}\n                    greeting = {this.state.greeting}/>\n\n          {/* this component also takes the passedOrder state from above to display what drink it's making. */}\n          <Machine passedOrder = {this.state.passedOrder}/>\n        </div>\n      </div>\n    );\n  }\n\n  handleOrder(newOrder) {\n\n    // this if statement runs through the class names in barista.js and display a message\n    // depending on which class name was chosen (the newOrder variable)\n    if(newOrder === \"dripBrew\") {\n      //this sets the state to the messages that will be shown in barista.js\n      this.setState({\n        passedOrder: \"Drip Coffee\",\n        order: \"One Drip Coffee? That will be $3.50.\",\n      })\n    } else if (newOrder === \"frenchPress\") {\n      this.setState({\n        passedOrder: \"French Press\",\n        order: \"One French Press? That will be $4.25.\",\n      })\n      //need last else if statement or else will automatically change to espresso on second click\n    } else if (newOrder ===\"espresso\"){\n      this.setState({\n        passedOrder: \"Espresso\",\n        order: \"One Espresso? That will be $4.00.\",\n      })\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}